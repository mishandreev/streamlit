import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import re
from collections import defaultdict
from typing import Dict, List, Tuple

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data() -> pd.DataFrame:
    excel_file = pd.ExcelFile('processed_with_params.xlsx')
    materials = excel_file.parse('–ú–∞—Ç–µ—Ä–∏–∞–ª—ã')
    equipment = excel_file.parse('–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ')
    mechanisms = excel_file.parse('–ú–µ—Ö–∞–Ω–∏–∑–º—ã')

    materials['–¢–∏–ø —Ä–µ—Å—É—Ä—Å–∞'] = '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã'
    equipment['–¢–∏–ø —Ä–µ—Å—É—Ä—Å–∞'] = '–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ'
    mechanisms['–¢–∏–ø —Ä–µ—Å—É—Ä—Å–∞'] = '–ú–µ—Ö–∞–Ω–∏–∑–º—ã'

    df = pd.concat([materials, equipment, mechanisms], ignore_index=True)

    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
    df = df.rename(columns={
        '–ö–æ–¥ —Ä–µ—Å—É—Ä—Å–∞': '–ö–æ–¥',
        '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ',
        '–ï–¥.–∏–∑–º.': '–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è',
        '–ö–æ–¥ –û–ö–ü–î2': '–û–ö–ü–î2',
        'tokens': '–¢–µ–≥–∏'
    })

    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    for col in df.columns:
        if df[col].dtype == 'object':
            df[col] = df[col].fillna('–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        elif df[col].dtype in ['int64', 'float64']:
            df[col] = df[col].fillna(0)

    # –§–ª–∞–≥ "–ò–º–µ–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"
    param_cols = [col for col in df.columns if col not in ['–ö–æ–¥', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è', '–û–ö–ü–î2', '–¢–µ–≥–∏', '–¢–∏–ø —Ä–µ—Å—É—Ä—Å–∞']]
    df['–ò–º–µ–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã'] = df[param_cols].apply(lambda row: any(val not in [0, '–ù–µ —É–∫–∞–∑–∞–Ω–æ'] for val in row), axis=1)

    return df

df = load_data()

# –ò–Ω–¥–µ–∫—Å –¥–ª—è –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
@st.cache_data
def build_autocomplete_index(df: pd.DataFrame) -> Tuple[Dict[str, set], Dict[int, str]]:
    token_index = defaultdict(set)
    name_map = {}
    for i, row in df.iterrows():
        name = str(row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']).lower()
        name_map[i] = name
        tokens = re.findall(r'\w+', name)
        for token in tokens:
            token_index[token].add(i)
    return token_index, name_map

token_index, name_map = build_autocomplete_index(df)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
def get_available_filters(df: pd.DataFrame, resource_type: str) -> Dict[str, str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å {–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: –∏–º—è —Å—Ç–æ–ª–±—Ü–∞} –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ —Ä–µ—Å—É—Ä—Å–∞."""
    filtered_df = df[df['–¢–∏–ø —Ä–µ—Å—É—Ä—Å–∞'] == resource_type]
    available_params = {}

    for col in filtered_df.columns:
        if col not in ['–ö–æ–¥', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è', '–û–ö–ü–î2', '–¢–µ–≥–∏', '–¢–∏–ø —Ä–µ—Å—É—Ä—Å–∞', '–ò–º–µ–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã']:
            # –ö—Ä–∞—Å–∏–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ (—É–±–∏—Ä–∞–µ–º '_mm' –∏ —Ç.–¥.)
            pretty_name = col.replace('_', ' ').title().replace('Mpa', 'MPa').replace('Kw', 'kW')
            available_params[pretty_name] = col

    return available_params

# –°–∞–π–¥–±–∞—Ä —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
st.sidebar.header("üîç –§–∏–ª—å—Ç—Ä—ã —Ä–µ—Å—É—Ä—Å–æ–≤")

# –ü–æ–∏—Å–∫ –ø–æ –∞–≤—Ç–æ–¥–æ–ø–æ–ª–Ω–µ–Ω–∏—é
st.sidebar.subheader("–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é")
query = st.sidebar.text_input("–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è")
suggestions = []

if len(query) >= 3:
    q_tokens = query.lower().split()
    matched_indices = set()
    for token in q_tokens:
        for k in token_index:
            if token in k:
                matched_indices.update(token_index[k])

    for i in matched_indices:
        row = df.iloc[i]
        label = f"{row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']} ({row['–¢–∏–ø —Ä–µ—Å—É—Ä—Å–∞']})"
        suggestions.append((label, row['–ö–æ–¥']))

    suggestions = sorted(suggestions, key=lambda x: x[0])[:10]
    options = [label for label, code in suggestions]
    selected_option = st.sidebar.selectbox("–í–∞—Ä–∏–∞–Ω—Ç—ã", options) if options else None
    if selected_option:
        selected_code = [code for label, code in suggestions if label == selected_option][0]
        filtered_df = df[df['–ö–æ–¥'] == selected_code]
    else:
        filtered_df = df.copy()
else:
    filtered_df = df.copy()

# –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —Ä–µ—Å—É—Ä—Å–∞
resource_type = st.sidebar.multiselect(
    "–¢–∏–ø —Ä–µ—Å—É—Ä—Å–∞",
    options=df['–¢–∏–ø —Ä–µ—Å—É—Ä—Å–∞'].unique(),
    default=df['–¢–∏–ø —Ä–µ—Å—É—Ä—Å–∞'].unique()
)
if resource_type:
    filtered_df = filtered_df[filtered_df['–¢–∏–ø —Ä–µ—Å—É—Ä—Å–∞'].isin(resource_type)]

# –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥–∞–º –∏ –Ω–∞–∑–≤–∞–Ω–∏—é
search_query = st.sidebar.text_input("–ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥–∞–º –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏—é")
if search_query:
    filtered_df = filtered_df[
        filtered_df['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'].str.contains(search_query, case=False, na=False) |
        filtered_df['–¢–µ–≥–∏'].str.contains(search_query, case=False, na=False)
    ]

# –§–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–ª–∏—á–∏—é –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
has_params = st.sidebar.checkbox("–¢–æ–ª—å–∫–æ —Ä–µ—Å—É—Ä—Å—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏", value=False)
if has_params:
    filtered_df = filtered_df[filtered_df['–ò–º–µ–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã']]

# –§–∏–ª—å—Ç—Ä—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ)
if len(resource_type) == 1:  # –§–∏–ª—å—Ç—Ä—ã –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –æ–¥–∏–Ω —Ç–∏–ø
    st.sidebar.subheader("‚öôÔ∏è –§–∏–ª—å—Ç—Ä—ã –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    available_params = get_available_filters(df, resource_type[0])

    for param_name, param_col in available_params.items():
        if param_col in filtered_df.columns:
            col_data = filtered_df[param_col]

            # –ß–∏—Å–ª–æ–≤–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            if pd.api.types.is_numeric_dtype(col_data):
                clean_series = col_data.replace(['–ù–µ —É–∫–∞–∑–∞–Ω–æ', 'NaN', 'nan'], pd.NA).dropna()
                if not clean_series.empty:
                    min_val, max_val = clean_series.min(), clean_series.max()

                    if min_val != max_val:
                        st.sidebar.markdown(f"**{param_name}**")
                        filter_type = st.sidebar.radio(
                            f"–¢–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è {param_name}",
                            ["–ü–æ–ª–∑—É–Ω–æ–∫", "–†—É—á–Ω–æ–π –≤–≤–æ–¥"],
                            key=f"filter_type_{param_col}"
                        )

                        if filter_type == "–ü–æ–ª–∑—É–Ω–æ–∫":
                            val_range = st.sidebar.slider(
                                f"–î–∏–∞–ø–∞–∑–æ–Ω {param_name}",
                                min_val, max_val, (min_val, max_val),
                                key=f"slider_{param_col}"
                            )
                            if val_range != (min_val, max_val):
                                filtered_df = filtered_df[
                                    (pd.to_numeric(filtered_df[param_col], errors='coerce') >= val_range[0]) &
                                    (pd.to_numeric(filtered_df[param_col], errors='coerce') <= val_range[1])
                                ]
                        else:
                            col1, col2 = st.sidebar.columns(2)
                            with col1:
                                min_input = col1.number_input(
                                    f"–ú–∏–Ω. {param_name}",
                                    min_val, max_val, min_val,
                                    key=f"min_{param_col}"
                                )
                            with col2:
                                max_input = col2.number_input(
                                    f"–ú–∞–∫—Å. {param_name}",
                                    min_val, max_val, max_val,
                                    key=f"max_{param_col}"
                                )
                            if min_input != min_val or max_input != max_val:
                                filtered_df = filtered_df[
                                    (pd.to_numeric(filtered_df[param_col], errors='coerce') >= min_input) &
                                    (pd.to_numeric(filtered_df[param_col], errors='coerce') <= max_input)
                                ]
            # –ö–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä
            elif col_data.nunique() > 1:
                unique_values = col_data.dropna().unique().tolist()
                try:
                    # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–∞ (–µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ)
                    unique_values = [float(x) if str(x).replace('.', '').isdigit() else x for x in unique_values]
                    options = ['–í—Å–µ'] + sorted(unique_values, key=lambda x: str(x))  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
                except:
                    options = ['–í—Å–µ'] + sorted(unique_values, key=lambda x: str(x))  # –†–µ–∑–µ—Ä–≤–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç

                selected = st.sidebar.multiselect(
                    f"–ó–Ω–∞—á–µ–Ω–∏—è {param_name}",
                    options=options,
                    default='–í—Å–µ',
                    key=f"select_{param_col}"
                )
                if '–í—Å–µ' not in selected:
                    filtered_df = filtered_df[filtered_df[param_col].isin(selected)]

# –í–∫–ª–∞–¥–∫–∏
tab1, tab2 = st.tabs(["–î–∞–Ω–Ω—ã–µ", "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è"])

with tab1:
    # –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    st.title("üìä –ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å –ö–°–†")
    st.subheader(f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤: {len(filtered_df)}")

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    st.dataframe(
        filtered_df,
        column_config={
            "–ö–æ–¥": "–ö–æ–¥",
            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": "–ù–∞–∑–≤–∞–Ω–∏–µ",
            "–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è": "–ï–¥. –∏–∑–º.",
            "–û–ö–ü–î2": "–û–ö–ü–î2",
            "–¢–µ–≥–∏": "–¢–µ–≥–∏",
            "–¢–∏–ø —Ä–µ—Å—É—Ä—Å–∞": "–¢–∏–ø",
            "–ò–º–µ–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã": st.column_config.CheckboxColumn("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
        },
        use_container_width=True,
        height=600
    )

    # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞
    if not filtered_df.empty:
        selected_resource = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—É—Ä—Å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞",
            options=filtered_df['–ö–æ–¥'] + " - " + filtered_df['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']
        )
        if selected_resource:
            resource_code = selected_resource.split(" - ")[0]
            resource_details = filtered_df[filtered_df['–ö–æ–¥'] == resource_code].iloc[0]

            st.subheader("üîç –î–µ—Ç–∞–ª–∏ —Ä–µ—Å—É—Ä—Å–∞")
            col1, col2 = st.columns(2)

            with col1:
                st.markdown(f"**–ö–æ–¥:** `{resource_details['–ö–æ–¥']}`")
                st.markdown(f"**–¢–∏–ø:** {resource_details['–¢–∏–ø —Ä–µ—Å—É—Ä—Å–∞']}")
                st.markdown(f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {resource_details['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']}")
                st.markdown(f"**–ï–¥. –∏–∑–º.:** {resource_details['–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è']}")
                st.markdown(f"**–û–ö–ü–î2:** {resource_details['–û–ö–ü–î2']}")
                if resource_details['–¢–µ–≥–∏'] != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                    st.markdown(f"**–¢–µ–≥–∏:** `{resource_details['–¢–µ–≥–∏']}`")

            with col2:
                st.markdown("**üìå –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:**")
                available_params = get_available_filters(df, resource_details['–¢–∏–ø —Ä–µ—Å—É—Ä—Å–∞'])
                for param_name, param_col in available_params.items():
                    if param_col in resource_details and resource_details[param_col] not in [0, '–ù–µ —É–∫–∞–∑–∞–Ω–æ']:
                        st.markdown(f"- **{param_name}:** `{resource_details[param_col]}`")

    # –≠–∫—Å–ø–æ—Ä—Ç
    if not filtered_df.empty:
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å CSV",
            data=filtered_df.to_csv(index=False, sep=';', encoding='utf-8-sig'),
            file_name='resources_export.csv',
            mime='text/csv'
        )

with tab2:
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    if not filtered_df.empty:
        st.header("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
        tab1, tab2, tab3 = st.tabs(["–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º", "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã", "–ß–∞—Å—Ç–æ—Ç–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"])

        with tab1:
            fig, ax = plt.subplots()
            filtered_df['–¢–∏–ø —Ä–µ—Å—É—Ä—Å–∞'].dropna().value_counts().plot.pie(autopct='%1.1f%%', ax=ax)
            ax.set_title("–î–æ–ª—è —Ç–∏–ø–æ–≤ —Ä–µ—Å—É—Ä—Å–æ–≤")
            ax.set_ylabel("")
            st.pyplot(fig)

        with tab2:
            if len(resource_type) == 1:
                available_params = get_available_filters(df, resource_type[0])
                numeric_params = {
                    name: col for name, col in available_params.items()
                    if col in filtered_df.columns and pd.api.types.is_numeric_dtype(filtered_df[col])
                }

                selected_param = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
                    options=list(numeric_params.keys())
                )
                if selected_param:
                    param_col = numeric_params[selected_param]
                    fig, ax = plt.subplots(figsize=(10, 4))
                    filtered_df[param_col].plot.hist(bins=20, ax=ax, color='skyblue')
                    ax.set_title(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {selected_param}")
                    ax.set_xlabel(selected_param)
                    ax.set_ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
                    st.pyplot(fig)

        with tab3:
            df = pd.read_excel('processed_with_params.xlsx')
            cpc = df.loc[:, 'thickness_mm':].notna().sum()
            plt.figure(figsize=(14, 6))
            bars = plt.bar(cpc.index, cpc.values, width=1)
            plt.xticks(rotation=45, ha='right')
            plt.grid(axis='y', alpha=0.5)
            plt.tight_layout()
            st.pyplot(plt)
